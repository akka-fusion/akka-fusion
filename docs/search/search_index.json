{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Akka Fusion"},{"location":"/index.html#akka-fusion","text":"Akka Fusion可以轻松创建独立的，生产级的基于Akka的应用程序。我们集成了Akka生态系统里常用及流行的组件，可以快速搭建你的应用。\n大多数Akka Fusion应用程序只需要很少的 配置。\n官网：https://ihongka.github.io/akka-fusion/。\nAkka Fusion以Akka工具库为基础，为用户提供开箱及用的微服务、云应用框架。Akka Fusion集成了Scala/Akka社区各种优秀的开源组件， 让你可以快速开始你的微服务开发，就像Spring Boot、Spring Cloud一样。但Akka Fusion更加强大、易用、安全， 它具有完备的编译期检查，让你在开发阶段即可排除更多的错误。","title":"Akka Fusion"},{"location":"/index.html#快速开始","text":"代码：\nobject SampleApplication extends App {\n  Injects.instance[SampleServer].start()\n}\n\n// Server\n@Singleton\nclass SampleServer @Inject()(val routes: SampleRoute) extends FusionServer\n\n// Controller\n@Singleton\nclass SampleRoute @Inject()(sampleService: SampleService) extends AbstractRoute {\n  override def route: Route = pathGet(\"hello\") {\n    parameters(('hello, 'year.as[Int].?(2019))).as(SampleReq) { req =>\n      futureComplete(sampleService.hello(req))\n    }\n  }\n}\n\n// Request、Response Model\ncase class SampleReq(hello: String, year: Int)\ncase class SampleResp(hello: String, year: Int, language: String)\n\n// Service\n@Singleton\nclass SampleService @Inject()(implicit ec: ExecutionContext) {\n\n  def hello(req: SampleReq): Future[SampleResp] = Future {\n    SampleResp(req.hello, req.year, \"scala\")\n  }\n}\n测试：\n$ curl -i http://localhost:8000/hello?hello=Hello\nHTTP/1.1 200 OK\nFusion-Server: fusion/0:0:0:0:0:0:0:0:8000\nServer: akka-http/10.1.7\nDate: Sat, 16 Feb 2019 11:24:37 GMT\nContent-Type: application/json\nContent-Length: 48\n\n{\"hello\":\"Hello\",\"year\":2019,\"language\":\"scala\"}","title":"快速开始"},{"location":"/index.html#目录","text":"简介 HTTP 开始 管理API Jdbc 示例 Data Mongodb Data Kafka 开始 Kafka Producer Kafka Consumer 服务注册、发现（Client） 连接 Nacos 配置 Fusion Core 配置 Fusion HTTP 配置 Fusion JDBC 配置 Fusion Mongodb 配置 Fusion Kafka 配置","title":"目录"},{"location":"/intro/index.html","text":"","title":"简介"},{"location":"/intro/index.html#简介","text":"关于Akka Fusion。","title":"简介"},{"location":"/http/index.html","text":"","title":"HTTP"},{"location":"/http/index.html#http","text":"开始 依赖 示例程序 内置API 管理API 健康检测 Fusion系统管理","title":"HTTP"},{"location":"/http/getting.html","text":"","title":"开始"},{"location":"/http/getting.html#开始","text":"","title":"开始"},{"location":"/http/getting.html#依赖","text":"要使用 Fusion Http，需要在你的项目添加如下依赖：\nsbt libraryDependencies += \"com.helloscala.fusion\" %% \"fusion-http\" % \"1.0.0-alpha6\" Maven <dependency>\n  <groupId>com.helloscala.fusion</groupId>\n  <artifactId>fusion-http_2.12</artifactId>\n  <version>1.0.0-alpha6</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.helloscala.fusion', name: 'fusion-http_2.12', version: '1.0.0-alpha6'\n}","title":"依赖"},{"location":"/http/getting.html#示例程序","text":"编写 src/main/application.conf 配置文件，添加以下配置：\ninclude reference.conf\n创建Scala文件：src/main/scala/docs/http/SampleHttp.scala\nobject SampleHttp extends App with Directives {\n  implicit val system = ActorSystem()\n\n  val route = path(\"hello\") {\n    get {\n      complete(\"Hello，Akka Fusion！\")\n    }\n  }\n  FusionHttp(system).startAwait(route)\n}\n运行object SampleHttp，即可启动一个简单的Fusion HTTP应用。我们可以访问 http://127.0.0.1:8000/hello 来进行测试：\n$ curl -i http://localhost:8000/hello\nHTTP/1.1 200 OK\nFusion-Server: default/0:0:0:0:0:0:0:0:8000\nServer: akka-http/10.1.7\nDate: Thu, 21 Feb 2019 09:42:02 GMT\nContent-Type: text/plain; charset=UTF-8\nContent-Length: 22\n\nHello，Akka Fusion！","title":"示例程序"},{"location":"/http/getting.html#内置api","text":"同时，Fusion HTTP还提供了健库检测和管理功能接口。\n健康检测 $ curl -i http://127.0.0.1:8558/_management/health/alive\nHTTP/1.1 200 OK\nContent-Length: 2\nContent-Type: text/plain; charset=UTF-8\nDate: Thu, 21 Feb 2019 09:52:05 GMT\nKeep-Alive: timeout=38\nServer: akka-http/10.1.7\n\nOK\n 关闭应用 $ curl -i -XPOST http://127.0.0.1:8558/_management/fusion/shutdown\nHTTP/1.1 200 OK\nContent-Length: 62\nContent-Type: application/json\nDate: Thu, 21 Feb 2019 09:52:57 GMT\nKeep-Alive: timeout=38\nServer: akka-http/10.1.7\n\n{\"status\":200,\"message\":\"1 second后开始关闭Fusion系统\"}","title":"内置API"},{"location":"/http/management.html","text":"","title":"管理API"},{"location":"/http/management.html#管理api","text":"","title":"管理API"},{"location":"/http/management.html#健康检测","text":"","title":"健康检测"},{"location":"/http/management.html#fusion系统管理","text":"","title":"Fusion系统管理"},{"location":"/jdbc/index.html","text":"","title":"Jdbc"},{"location":"/jdbc/index.html#jdbc","text":"Akka Fusion基于Akka Extension机制提供了配置化的 HikariDataSource 管理。 同时，提供了 JdbcTemplate 来简化我们的JDBC编程工作。","title":"Jdbc"},{"location":"/jdbc/index.html#示例","text":"配置 src/main/resources/application.conf\nfusion.jdbc {\n  default {\n    poolName = \"hongka\"\n    jdbcUrl = \"jdbc:mysql://localhost:3306/ihongka?useSSL=false&autoReconnect=true\"\n    username = \"devops\"\n    password = \"2019.Devops\"\n    connectionTestQuery = \"select 1;\"\n    maximumPoolSize = 2\n  }\n}\n测试代码\npackage fusion.jdbc\n\nimport akka.actor.ActorSystem\nimport com.zaxxer.hikari.HikariDataSource\nimport fusion.test.FusionTestFunSuite\nimport helloscala.common.util.DigestUtils\nimport org.scalatest.BeforeAndAfterAll\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration.Duration\nimport scala.util.Random\n\nclass JdbcTemplateTest extends FusionTestFunSuite with BeforeAndAfterAll {\n  private val system = ActorSystem()\n  private def dataSource: HikariDataSource = FusionJdbc(system).component\n  private def jdbcTemplate = JdbcTemplate(dataSource)\n\n  test(\"insertOne\") {\n    val sql = \"\"\"insert into c_file(file_id, file_subject, file_type, file_url, file_ctime, duration, hash)\n                |values (?, ?, ?, ?, ?, ?, ?);\"\"\".stripMargin\n    val hash = DigestUtils.sha256Hex(Random.nextString(12))\n    val ret =\n      jdbcTemplate.update(sql,\n                          List(hash, \"subject\", 3, s\"/${hash.take(2)}/$hash\", System.currentTimeMillis(), 23432, hash))\n    ret mustBe 1\n  }\n\n  test(\"selectAll\") {\n    //中华人民共和国\n    val list = jdbcTemplate.listForMap(\"select * from c_file order by file_ctime desc\", Nil)\n    list must not be empty\n    list.foreach(println)\n  }\n\n  override protected def afterAll(): Unit = {\n    system.terminate()\n    Await.ready(system.whenTerminated, Duration.Inf)\n  }\n\n}","title":"示例"},{"location":"/data-mongodb/index.html","text":"","title":"Data Mongodb"},{"location":"/data-mongodb/index.html#data-mongodb","text":"","title":"Data Mongodb"},{"location":"/data-kafka/index.html","text":"","title":"Data Kafka"},{"location":"/data-kafka/index.html#data-kafka","text":"开始 依赖 Kafka Producer Kafka Consumer","title":"Data Kafka"},{"location":"/data-kafka/getting.html","text":"","title":"开始"},{"location":"/data-kafka/getting.html#开始","text":"","title":"开始"},{"location":"/data-kafka/getting.html#依赖","text":"sbt libraryDependencies += \"com.helloscala.fusion\" %% \"fusion-kafka\" % \"1.0.0-alpha6\" Maven <dependency>\n  <groupId>com.helloscala.fusion</groupId>\n  <artifactId>fusion-kafka_2.12</artifactId>\n  <version>1.0.0-alpha6</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.helloscala.fusion', name: 'fusion-kafka_2.12', version: '1.0.0-alpha6'\n}","title":"依赖"},{"location":"/data-kafka/producer.html","text":"","title":"Kafka Producer"},{"location":"/data-kafka/producer.html#kafka-producer","text":"","title":"Kafka Producer"},{"location":"/data-kafka/consumer.html","text":"","title":"Kafka Consumer"},{"location":"/data-kafka/consumer.html#kafka-consumer","text":"","title":"Kafka Consumer"},{"location":"/discovery-client/index.html","text":"","title":"服务注册、发现（Client）"},{"location":"/discovery-client/index.html#服务注册-发现-client-","text":"Fusion提供服务注册、发现功能，当前支持 Nacos。\n连接 Nacos 依赖 开始使用 更多示例","title":"服务注册、发现（Client）"},{"location":"/discovery-client/nacos.html","text":"","title":"连接 Nacos"},{"location":"/discovery-client/nacos.html#连接-nacos","text":"","title":"连接 Nacos"},{"location":"/discovery-client/nacos.html#依赖","text":"要使用Fusion提供到服务发现、注册客户端功能，需添加以下依赖：\nsbt libraryDependencies += \"com.helloscala.fusion\" %% \"fusion-discovery-client\" % \"1.0.0-alpha6\" Maven <dependency>\n  <groupId>com.helloscala.fusion</groupId>\n  <artifactId>fusion-discovery-client_2.12</artifactId>\n  <version>1.0.0-alpha6</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.helloscala.fusion', name: 'fusion-discovery-client_2.12', version: '1.0.0-alpha6'\n}","title":"依赖"},{"location":"/discovery-client/nacos.html#开始使用","text":"在application.conf配置文件中添加以下配置指定Nacos服务端：\nfusion.discovery {\n  enable = true\n  nacos {\n    serverAddr = \"10.0.5.36:8849\"\n    namespace = \"7bf36554-e291-4789-b5fb-9e515ca58ba0\"\n    dataId = \"hongka.file.app\"\n    group = \"DEFAULT_GROUP\"\n    timeoutMs = 3000\n    serviceName = \"hongka-file-app\"\n  }\n}\n各配置荐含义为：\nenable：启用Fusion Discovery功能，默认值为false nacos.serverAddr：Nacos服务地址 nacos.namespace：Nacos服务命名空间（可选） nacos.dataId：配置ID nacos.group：配置分组 nacos.timeoutMs：获取注册配置时的超时时间（单位：毫秒），默认值为3000 nacos.serviceName：注册到Nacos时的服务端，不指定则使用fusion.name配置","title":"开始使用"},{"location":"/discovery-client/nacos.html#获取配置","text":"添加以上配置以后，通常我们可以使用Configuration.fromDiscovery()来自动从Nacos服务获取配置信息。当未启用fusion-discovery或Nacos连接失败时将使用本地配置。","title":"获取配置"},{"location":"/discovery-client/nacos.html#注册服务到nacos","text":"Fusion提供了Akka扩展：FusionNacos自动实现注册服务到Nacos。使用ActorSystem的实例调用FusionNacos即可，FusionNacos(system)。代码示例如下：\nval configuration = Configuration.fromDiscovery()\nval system = ActorSystem(\"name\", configuration.underlying)\nFusionNacos(system)","title":"注册服务到Nacos"},{"location":"/discovery-client/nacos.html#更多示例","text":"test(\"通过Server地址直接访问\") {\n    val configService = NacosServiceFactory.configService(\"123.206.9.104:8849\")\n    val confStr = configService.getConfig(\"hongka.file.app\", \"DEFAULT_GROUP\", 3000)\n    confStr must not be empty\n    val config = ConfigFactory.parseString(confStr).resolve()\n    config.getString(\"fusion.name\") mustBe \"file-local\"\n  }\n\n  test(\"通过namespace访问\") {\n    val props = new Properties()\n    props.put(\"serverAddr\", \"123.206.9.104:8849\")\n    props.put(\"namespace\", \"7bf36554-e291-4789-b5fb-9e515ca58ba0\")\n\n    val configService = NacosServiceFactory.configService(props)\n    val confStr = configService.getConfig(\"hongka.file.app\", \"DEFAULT_GROUP\", 3000)\n    confStr must not be empty\n    ConfigFactory.invalidateCaches()\n    val config = ConfigFactory.parseString(confStr).resolve()\n    config.getString(\"fusion.name\") mustBe \"file-app\"\n  }\n\n  test(\"尝试发现配置，失败读本地配置\") {\n    val props = sys.props\n    props.put(\"fusion.discovery.enable\", \"true\")\n    props.put(\"fusion.discovery.nacos.serverAddr\", \"123.206.9.104:8849\")\n    props.put(\"fusion.discovery.nacos.namespace\", \"7bf36554-e291-4789-b5fb-9e515ca58ba0\")\n    props.put(\"fusion.discovery.nacos.dataId\", \"hongka.file.app\")\n//    props.put(\"fusion.discovery.nacos.group\", \"DEFAULT_GROUP\")\n    val configuration = Configuration.fromDiscovery()\n    configuration.getString(\"fusion.name\") mustBe \"file-app\"\n  }\n代码见： NacosServiceFactoryTest.scala 。","title":"更多示例"},{"location":"/configuration/index.html","text":"","title":"配置"},{"location":"/configuration/index.html#配置","text":"Fusion Core 配置 Fusion HTTP 配置 Fusion JDBC 配置 Fusion Mongodb 配置 Fusion Kafka 配置","title":"配置"},{"location":"/configuration/core.html","text":"","title":"Fusion Core 配置"},{"location":"/configuration/core.html#fusion-core-配置","text":"fusion {\n  # Fusion系统名，同时也设置为ActorSystem的name\n  name = \"fusion\"\n}","title":"Fusion Core 配置"},{"location":"/configuration/http.html","text":"","title":"Fusion HTTP 配置"},{"location":"/configuration/http.html#fusion-http-配置","text":"fusion {\n  server {\n    host = \"0.0.0.0\"\n    port = 8000\n  }\n\n  http {\n    custom-media-types = [\n      \"video/x-wmv;true;notcompressible;wmv\",\n      \"audio/x-m4a;true;notcompressible;m4a\",\n      \"audio/x-flac;true;notcompressible;flac\"\n    ]\n  }\n}\n\nakka.http {\n  client {\n\n  }\n}\n\nakka.management {\n  fusion {\n    # 是否启用 akka.management，默认为false\n    enable = false\n    terminate-timeout = 60s\n  }\n  http {\n    hostname = \"127.0.0.1\"\n    //port = 8559\n    base-path = \"_management\"\n    route-providers += \"fusion.http.management.FusionManagementRoutes\"\n    route-providers += \"akka.management.HealthCheckRoutes\"\n    route-providers-read-only = true\n  }\n  health-checks {\n    readiness-path = \"health/ready\"\n    liveness-path = \"health/alive\"\n  }\n}","title":"Fusion HTTP 配置"},{"location":"/configuration/jdbc.html","text":"","title":"Fusion JDBC 配置"},{"location":"/configuration/jdbc.html#fusion-jdbc-配置","text":"fusion.jdbc {\n  default {\n    poolName = \"hongka\"\n    jdbcUrl = \"jdbc:mysql://localhost:3306/ihongka?useSSL=false&autoReconnect=true\"\n    username = \"devops\"\n    password = \"2019.Devops\"\n    connectionTestQuery = \"select 1;\"\n    maximumPoolSize = 2\n  }\n}","title":"Fusion JDBC 配置"},{"location":"/configuration/mongodb.html","text":"","title":"Fusion Mongodb 配置"},{"location":"/configuration/mongodb.html#fusion-mongodb-配置","text":"fusion.data.mongodb {\n  default {\n    uri = \"mongodb://localhost:27017\"\n  }\n}","title":"Fusion Mongodb 配置"},{"location":"/configuration/kafka.html","text":"","title":"Fusion Kafka 配置"},{"location":"/configuration/kafka.html#fusion-kafka-配置","text":"","title":"Fusion Kafka 配置"},{"location":"/configuration/mybatis.html","text":"","title":"Fusion Mybatis"},{"location":"/configuration/mybatis.html#fusion-mybatis","text":"","title":"Fusion Mybatis"},{"location":"/configuration/mybatis.html#配置","text":"fusion.mybatis {\n  default = {\n    jdbc-data-source = fusion.jdbc.default\n    package-names = [\"fusion.mybatis.mapper\"]\n  }\n}","title":"配置"},{"location":"/mybatis/index.html","text":"","title":"MyBatis"},{"location":"/mybatis/index.html#mybatis","text":"fusion-mybatis 提供了对 MyBatis SqlSessionFactory 的管理功能，它依赖 fusion-jdbc 组件。","title":"MyBatis"},{"location":"/mybatis/index.html#目录","text":"起步 依赖 示例 配置","title":"目录"},{"location":"/mybatis/getting.html","text":"","title":"起步"},{"location":"/mybatis/getting.html#起步","text":"","title":"起步"},{"location":"/mybatis/getting.html#依赖","text":"sbt libraryDependencies += \"com.helloscala.fusion\" %% \"fusion-mybatis\" % \"1.0.0-alpha6\" Maven <dependency>\n  <groupId>com.helloscala.fusion</groupId>\n  <artifactId>fusion-mybatis_2.12</artifactId>\n  <version>1.0.0-alpha6</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.helloscala.fusion', name: 'fusion-mybatis_2.12', version: '1.0.0-alpha6'\n}","title":"依赖"},{"location":"/mybatis/getting.html#示例","text":"class FusionMybatisTest extends TestKit(ActorSystem(\"fusion-mybatis\")) with FusionTestFunSuite {\n\n  test(\"testSqlSession\") {\n    val sqlSessionFactory = FusionMybatis(system).component\n    sqlSessionFactory must not be null\n\n    Utils.using(sqlSessionFactory.openSession()) { session =>\n      session must not be null\n    }\n  }\n\n  test(\"testFileMapper\") {\n    val sqlSessionFactory = FusionMybatis(system).component\n    Utils.using(sqlSessionFactory.openSession()) { session =>\n      val fileMapper = session.getMapper(classOf[FileMapper])\n      val list = fileMapper.list(10)\n      list.forEach(println)\n      list must not be empty\n    }\n  }\n\n}","title":"示例"},{"location":"/mybatis/configuration.html","text":"","title":"配置"},{"location":"/mybatis/configuration.html#配置","text":"见： FusionMybatis 。","title":"配置"}]}