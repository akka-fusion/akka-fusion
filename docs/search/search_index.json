{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Akka Fusion"},{"location":"/index.html#akka-fusion","text":"Akka Fusion可以轻松创建独立的，生产级的基于Akka的应用程序。我们集成了Akka生态系统里常用及流行的组件，可以快速搭建你的应用。\n大多数Akka Fusion应用程序只需要很少的 配置。\n官网：https://ihongka.github.io/akka-fusion/。\nAkka Fusion以Akka工具库为基础，为用户提供开箱及用的微服务、云应用框架。Akka Fusion集成了Scala/Akka社区各种优秀的开源组件， 让你可以快速开始你的微服务开发，就像Spring Boot、Spring Cloud一样。但Akka Fusion更加强大、易用、安全， 它具有完备的编译期检查，让你在开发阶段即可排除更多的错误。","title":"Akka Fusion"},{"location":"/index.html#快速开始","text":"代码：\nobject SampleApplication extends App {\n  Injects.instance[SampleServer].start()\n}\n\n// Server\n@Singleton\nclass SampleServer @Inject()(val routes: SampleRoute) extends FusionServer\n\n// Controller\n@Singleton\nclass SampleRoute @Inject()(sampleService: SampleService) extends AbstractRoute {\n  override def route: Route = pathGet(\"hello\") {\n    parameters(('hello, 'year.as[Int].?(2019))).as(SampleReq) { req =>\n      futureComplete(sampleService.hello(req))\n    }\n  }\n}\n\n// Request、Response Model\ncase class SampleReq(hello: String, year: Int)\ncase class SampleResp(hello: String, year: Int, language: String)\n\n// Service\n@Singleton\nclass SampleService @Inject()(implicit ec: ExecutionContext) {\n\n  def hello(req: SampleReq): Future[SampleResp] = Future {\n    SampleResp(req.hello, req.year, \"scala\")\n  }\n}\n测试：\n$ curl -i http://localhost:8000/hello?hello=Hello\nHTTP/1.1 200 OK\nFusion-Server: fusion/0:0:0:0:0:0:0:0:8000\nServer: akka-http/10.1.7\nDate: Sat, 16 Feb 2019 11:24:37 GMT\nContent-Type: application/json\nContent-Length: 48\n\n{\"hello\":\"Hello\",\"year\":2019,\"language\":\"scala\"}","title":"快速开始"},{"location":"/index.html#目录","text":"Introduction Jdbc 示例 Data Mongodb Data Kafka 配置 fusion-core","title":"目录"},{"location":"/intro/index.html","text":"","title":"Introduction"},{"location":"/intro/index.html#introduction","text":"关于Akka Fusion。","title":"Introduction"},{"location":"/jdbc/index.html","text":"","title":"Jdbc"},{"location":"/jdbc/index.html#jdbc","text":"Akka Fusion基于Akka Extension机制提供了配置化的 HikariDataSource 管理。 同时，提供了 JdbcTemplate 来简化我们的JDBC编程工作。","title":"Jdbc"},{"location":"/jdbc/index.html#示例","text":"配置 src/main/resources/application.conf\nfusion.jdbc {\n  default {\n    poolName = \"hongka\"\n    jdbcUrl = \"jdbc:mysql://localhost:3306/ihongka?useSSL=false&autoReconnect=true\"\n    username = \"devops\"\n    password = \"2019.Devops\"\n    connectionTestQuery = \"select 1;\"\n    maximumPoolSize = 2\n  }\n}\n测试代码\npackage fusion.jdbc\n\nimport akka.actor.ActorSystem\nimport com.zaxxer.hikari.HikariDataSource\nimport fusion.test.FusionTestFunSuite\nimport helloscala.common.util.DigestUtils\nimport org.scalatest.BeforeAndAfterAll\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration.Duration\nimport scala.util.Random\n\nclass JdbcTemplateTest extends FusionTestFunSuite with BeforeAndAfterAll {\n  private val system = ActorSystem()\n  private def dataSource: HikariDataSource = FusionJdbc(system).component\n  private def jdbcTemplate = JdbcTemplate(dataSource)\n\n  test(\"insertOne\") {\n    val sql = \"\"\"insert into c_file(file_id, file_subject, file_type, file_url, file_ctime, duration, hash)\n                |values (?, ?, ?, ?, ?, ?, ?);\"\"\".stripMargin\n    val hash = DigestUtils.sha256Hex(Random.nextString(12))\n    val ret =\n      jdbcTemplate.update(sql,\n                          List(hash, \"subject\", 3, s\"/${hash.take(2)}/$hash\", System.currentTimeMillis(), 23432, hash))\n    ret mustBe 1\n  }\n\n  test(\"selectAll\") {\n    val list = jdbcTemplate.listForMap(\"select * from c_file order by file_ctime desc\", Nil)\n    list must not be empty\n    list.foreach(println)\n  }\n\n  override protected def afterAll(): Unit = {\n    system.terminate()\n    Await.ready(system.whenTerminated, Duration.Inf)\n  }\n\n}","title":"示例"},{"location":"/data-mongodb/index.html","text":"","title":"Data Mongodb"},{"location":"/data-mongodb/index.html#data-mongodb","text":"","title":"Data Mongodb"},{"location":"/data-kafka/index.html","text":"","title":"Data Kafka"},{"location":"/data-kafka/index.html#data-kafka","text":"","title":"Data Kafka"},{"location":"/configuration/index.html","text":"","title":"配置"},{"location":"/configuration/index.html#配置","text":"Akka Fusion配置。","title":"配置"},{"location":"/configuration/index.html#fusion-core","text":"fusion {\n  # Fusion系统名，同时也设置为ActorSystem的name\n  name = \"fusion\"\n  # Fusion内建模块（Guice）\n  module += \"fusion.core.inject.builtin.BuiltinModule\"\n}","title":"fusion-core"}]}